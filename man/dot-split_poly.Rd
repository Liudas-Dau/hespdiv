% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split_poly.R
\name{.split_poly}
\alias{.split_poly}
\title{Split a polygon}
\usage{
.split_poly(polygon, split_ids, min_id = NULL, trivial_side = TRUE, poli_side)
}
\arguments{
\item{polygon}{A data frame containing coordinates of a polygon that will be split. The polygon can be either closed or open.}

\item{split_ids}{A vector containing 2 integers. These integers should be indeces of polygon data frame rows that contain coordinates
of vertices that are used to split a polygon.}

\item{min_id}{(Optional) Integer (1 or 2) showing which of the polygon vertices indicated by the \code{split_ids} has lower x coordinate
(or lower y coordinate, if split line is vertical).}

\item{trivial_side}{A logical argument indicating whether it matters which side of the divided polygon will be returned.}

\item{poli_side}{A logical argument. When \code{trivial_side} is \code{FALSE}, \code{poli_side = TRUE} returns the upper half
(or the left half, if split line is vertical) of a divided polygon and \code{poli_side = FALSE} returns the lower (the right) half.}
}
\value{
A data frame containing coordinates of one half of a polygon divided by the split line. The resulting polygon is open.
}
\description{
This function splits a polygon in two halfs by a split line that links two provided polygon vertices and returns one half of this polygon.
}
\details{
When \code{trivial_side = TRUE}, computations are much faster. The duration of computations also depend on the complexity of
polygons - they are longer when none of the sides of the divided polygon has all vertices on one side of the split line. The computations
are also faster, when split line is horizontal or vertical. The use of \code{min_id} only marginally reduces the amount of calculations.
}
\examples{
#Creating a data.frame of an irregular polygon
poly<-data.frame(X=c(0,-1,12,0,5,12,12,7,-5,
11,-3,10,-10,-10,15,15,-1,13,13,-7,-7,0),
Y=c(0,5,10,4,4,3,-3,-10,-11,-4,-4,0,-2,20,20,-20,-20,-15,15,15,2,0))
plot(poly,type='o',main='Horizontal Split Line')
#Horizontal Split Line
lines(poly[c(1,12),1],poly[c(1,12),2],lty='dotted')
#Dividing a polygon
upper_half <- .split_poly(polygon = poly, split_ids = c(1,12), min_id = 1, trivial_side = FALSE, poli_side = TRUE)
lower_half <- .split_poly(polygon = poly, split_ids = c(1,12), min_id = 1, trivial_side = FALSE, poli_side = FALSE)
lines(upper_half,col=4)
lines(lower_half,col=2)


plot(poly,type='o',main='Vertical Split Line')
#Vertical Split Line
lines(poly[c(1,4),1],poly[c(1,4),2],lty='dotted')
#Dividing a polygon
left_half <- .split_poly(polygon = poly, split_ids = c(1,4), min_id = 1, trivial_side = FALSE, poli_side = TRUE)
right_half <- .split_poly(polygon = poly, split_ids = c(1,4), min_id = 1, trivial_side = FALSE, poli_side = FALSE)
lines(left_half,col=4)
lines(right_half,col=2)

plot(poly,type='o',main='Inclined Split Line')
#Inclined Split Line
lines(poly[c(1,6),1],poly[c(1,6),2],lty='dotted')
#Dividing a polygon
upper_half <- .split_poly(polygon = poly, split_ids = c(1,6), min_id = 1, trivial_side = FALSE, poli_side = TRUE)
lower_half <- .split_poly(polygon = poly, split_ids = c(1,6), min_id = 1, trivial_side = FALSE, poli_side = FALSE)
lines(upper_half,col=4)
lines(lower_half,col=2)
}
\author{
Liudas Daumantas
}
